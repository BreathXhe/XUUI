local collector = require 'collector'
local observeable = require 'observeable'

local _M = {}

local load = load or loadstring
local parse_path = (require 'xuui_utils').parse_path
local get_by_keys = (require 'xuui_utils').get_by_keys

local function compile(str)
    local code = "return function(___data)\n"
                 .. "return "
                 .. str:gsub("$%.", "___data.")
                 .. "\nend"
    return load(code)()
end

local function listen_to(data, observe, computed, el, cbs)
    local bind_to = assert(el.BindTo, 'invalid BindTo:' .. el.BindTo)
    local module_name
    if bind_to:find('%.') then
        module_name = bind_to:sub(1, bind_to:find("%.") - 1)
    end
    local is_computed = not not computed[bind_to]
    local is_computed_bind = not not (bind_to:find('$%.'))
    if is_computed or is_computed_bind then
        local tmpdata = (is_computed and module_name) and data[module_name] or data
        local associate = {}
        local get = is_computed_bind and compile(bind_to) or computed[bind_to]
        observe:read_report(function(path)
            table.insert(associate, path)
        end)
        local value = observeable.raw(get(tmpdata))
        observe:read_report()
        --print('computed', bind_to, value)
        el.Value = value
        for _, path in ipairs(associate) do
            local cb
            if (not module_name) or is_computed_bind then -- 获取的都是全局的
                cb = observe:watch(path, function()
                    el.Value = observeable.raw(get(data))
                end)
            else -- module_name and not is_computed_bind
                cb = observe:watch(path, function()
                    el.Value = observeable.raw(computed[bind_to](data[module_name]))
                end)
            end
            table.insert(cbs, cb)
        end
    else
        el.Value = observeable.raw(observe:getter(bind_to)(data))
        local cb = observe:watch(bind_to, function(_, value, old)
            el.Value = observeable.raw(value)
        end)
        table.insert(cbs, cb)
    end
end

local function watch_to(data, observe, el)
    local bind_to = assert(el.BindTo, 'invalid BindTo:' .. el.BindTo)
    local set = observe:setter(bind_to)
    el.OnValueChange = function(value)
        set(data, value)
    end
end

local function bind_action(data, commands, el)
    local bind_to = assert(el.BindTo, 'invalid BindTo:' .. el.BindTo)
    local module_name
    if bind_to:find('%.') then
        module_name = bind_to:sub(1, bind_to:find("%.") - 1)
    end
    local func = assert(commands[bind_to], 'invalid BindTo:' .. bind_to)
    if module_name then
        el.OnAction = function(...)
            commands[bind_to](data[module_name], ...)
        end
    else
        el.OnAction = function(...)
            func(data, ...)
        end
    end
end



function _M.bind(data, observe, computed, commands, root)
    local bindings = collector.collect(root)
    local cbs = {}
    for _, obj in ipairs(bindings[1]) do
        listen_to(data, observe, computed, obj, cbs)
    end
    
    for _, obj in ipairs(bindings[2]) do
        watch_to(data, observe, obj)
    end
    
    for _, obj in ipairs(bindings[3]) do
        bind_action(data, commands, obj)
    end
    
    local function detach()
        for _, cb in ipairs(cbs) do
            observe:unwatch(cb)
        end
        for _, obj in ipairs(bindings[2]) do
            obj.OnValueChange = nil
        end
        for _, obj in ipairs(bindings[3]) do
            obj.OnAction = nil
        end
    end
    return detach
end

return _M
